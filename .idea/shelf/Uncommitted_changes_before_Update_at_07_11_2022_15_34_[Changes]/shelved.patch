Index: src/main/java/com/example/blockchainApp/controllers/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package com.example.blockchainApp.controllers;\r\n//\r\n//import com.example.blockchainApp.models.User;\r\n//import com.example.blockchainApp.services.UserService;\r\n//import org.springframework.beans.factory.annotation.Autowired;\r\n//import org.springframework.http.HttpStatus;\r\n//import org.springframework.http.ResponseEntity;\r\n//import org.springframework.web.bind.annotation.PostMapping;\r\n//import org.springframework.web.bind.annotation.RequestBody;\r\n//import org.springframework.web.bind.annotation.ResponseBody;\r\n//import org.springframework.web.bind.annotation.RestController;\r\n//\r\n//@RestController\r\n//public class UserController {\r\n//\r\n//    @Autowired\r\n//    UserService service;\r\n//\r\n//    private boolean validateUser(User user){\r\n//        return true;\r\n//    }\r\n//\r\n//    @PostMapping(\"/user\")\r\n//    public ResponseEntity<User> createUser(@RequestBody User user){\r\n//        HttpStatus code = null;\r\n//\r\n//        if (validateUser(user)){\r\n//            try{\r\n//                service.createUser(user);\r\n//                code = HttpStatus.CREATED;\r\n//            } catch (Exception exception) {\r\n//                code = HttpStatus.INTERNAL_SERVER_ERROR;\r\n//            }\r\n//        } else {\r\n//            code = HttpStatus.BAD_REQUEST;\r\n//        }\r\n//        return new ResponseEntity<User>(user, code);\r\n//    }\r\n//}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/blockchainApp/controllers/UserController.java b/src/main/java/com/example/blockchainApp/controllers/UserController.java
--- a/src/main/java/com/example/blockchainApp/controllers/UserController.java	(revision 464acecd4bb69912f6229b0cb632e5bc222e035f)
+++ b/src/main/java/com/example/blockchainApp/controllers/UserController.java	(date 1667831669156)
@@ -1,39 +1,43 @@
-//package com.example.blockchainApp.controllers;
-//
-//import com.example.blockchainApp.models.User;
-//import com.example.blockchainApp.services.UserService;
-//import org.springframework.beans.factory.annotation.Autowired;
-//import org.springframework.http.HttpStatus;
-//import org.springframework.http.ResponseEntity;
-//import org.springframework.web.bind.annotation.PostMapping;
-//import org.springframework.web.bind.annotation.RequestBody;
-//import org.springframework.web.bind.annotation.ResponseBody;
-//import org.springframework.web.bind.annotation.RestController;
-//
-//@RestController
-//public class UserController {
-//
-//    @Autowired
-//    UserService service;
-//
-//    private boolean validateUser(User user){
-//        return true;
-//    }
-//
-//    @PostMapping("/user")
-//    public ResponseEntity<User> createUser(@RequestBody User user){
-//        HttpStatus code = null;
-//
-//        if (validateUser(user)){
-//            try{
-//                service.createUser(user);
-//                code = HttpStatus.CREATED;
-//            } catch (Exception exception) {
-//                code = HttpStatus.INTERNAL_SERVER_ERROR;
-//            }
-//        } else {
-//            code = HttpStatus.BAD_REQUEST;
-//        }
-//        return new ResponseEntity<User>(user, code);
-//    }
-//}
+package com.example.blockchainApp.controllers;
+
+import com.example.blockchainApp.models.User;
+import com.example.blockchainApp.services.UserService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+public class UserController {
+
+    @Autowired
+    UserService service;
+
+    private boolean validateUser(User user) {
+        return true;
+    }
+
+    @PostMapping("/user")
+    public User createUser(@RequestBody User user) {
+        return service.createUser(user);
+    }
+
+    @GetMapping("/allUsers")
+    @CrossOrigin
+    public List<User> getAllUsers() {
+        return service.getAllUsers();
+    }
+
+    @GetMapping("{id}")
+    @CrossOrigin
+    public User getUserById(@PathVariable long id) {
+        return service.getUserById(id);
+    }
+
+    @GetMapping("/check_email")
+    @CrossOrigin
+    public String emailExists(String email){
+        return service.emailExists(email);
+    }
+}
+>>>>>>> e7476a2600291c1b5db51000ff7fc68ec416ed74
Index: src/main/java/com/example/blockchainApp/services/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package com.example.blockchainApp.services;\r\n//\r\n//import com.example.blockchainApp.models.User;\r\n//import com.example.blockchainApp.repositories.UserRepository;\r\n//import org.springframework.beans.factory.annotation.Autowired;\r\n//import org.springframework.stereotype.Service;\r\n//import org.springframework.transaction.annotation.Transactional;\r\n//\r\n//import java.util.List;\r\n//\r\n//@Service\r\n//public class UserService {\r\n//\r\n//    @Autowired\r\n//    private UserRepository repository;\r\n//\r\n//    @Transactional\r\n//    public List<User> getAllUsers() {\r\n//        return repository.findAll();\r\n//    }\r\n//\r\n//    @Transactional\r\n//    public User getUserById(Long id) {\r\n//        return repository.findById(id).get();\r\n//    }\r\n//    // Returns null if the email doesn't exist\r\n//    // else, return the email\r\n//\r\n//\r\n//    @Transactional\r\n//    public String emailExists(String email) {\r\n//        if (email != null) {\r\n//            User user = repository.findUserByEmail(email);\r\n//            if (user != null) {\r\n//                return email;\r\n//            }\r\n//        }\r\n//        return null;\r\n//    }\r\n//\r\n//    @Transactional\r\n//    public User createUser(User user){\r\n//        repository.save(user);\r\n//        return user;\r\n//    }\r\n//\r\n//\r\n//}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/blockchainApp/services/UserService.java b/src/main/java/com/example/blockchainApp/services/UserService.java
--- a/src/main/java/com/example/blockchainApp/services/UserService.java	(revision 464acecd4bb69912f6229b0cb632e5bc222e035f)
+++ b/src/main/java/com/example/blockchainApp/services/UserService.java	(date 1667831666514)
@@ -1,48 +1,48 @@
-//package com.example.blockchainApp.services;
-//
-//import com.example.blockchainApp.models.User;
-//import com.example.blockchainApp.repositories.UserRepository;
-//import org.springframework.beans.factory.annotation.Autowired;
-//import org.springframework.stereotype.Service;
-//import org.springframework.transaction.annotation.Transactional;
-//
-//import java.util.List;
-//
-//@Service
-//public class UserService {
-//
-//    @Autowired
-//    private UserRepository repository;
-//
-//    @Transactional
-//    public List<User> getAllUsers() {
-//        return repository.findAll();
-//    }
-//
-//    @Transactional
-//    public User getUserById(Long id) {
-//        return repository.findById(id).get();
-//    }
-//    // Returns null if the email doesn't exist
-//    // else, return the email
-//
-//
-//    @Transactional
-//    public String emailExists(String email) {
-//        if (email != null) {
-//            User user = repository.findUserByEmail(email);
-//            if (user != null) {
-//                return email;
-//            }
-//        }
-//        return null;
-//    }
-//
-//    @Transactional
-//    public User createUser(User user){
-//        repository.save(user);
-//        return user;
-//    }
-//
-//
-//}
+package com.example.blockchainApp.services;
+
+import com.example.blockchainApp.models.User;
+import com.example.blockchainApp.repositories.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.List;
+
+@Service
+public class UserService {
+
+    @Autowired
+    private UserRepository repository;
+
+    @Transactional
+    public List<User> getAllUsers() {
+        return repository.findAll();
+    }
+
+    @Transactional
+    public User getUserById(Long id) {
+        return repository.findById(id).get();
+    }
+    // Returns null if the email doesn't exist
+    // else, return the email
+
+
+    @Transactional
+    public String emailExists(String email) {
+        if (email != null) {
+            User user = repository.findUserByEmail(email);
+            if (user != null) {
+                return email;
+            }
+        }
+        return null;
+    }
+
+    @Transactional
+    public User createUser(User user){
+        repository.save(user);
+        return user;
+    }
+
+
+}
Index: src/main/java/com/example/blockchainApp/models/Question.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.blockchainApp.models;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\n\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Table(name = \"questions\")\r\npublic class Question {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column\r\n    private long id;\r\n    @Column\r\n    private String vertical;\r\n    @Column\r\n    private String question;\r\n\r\n    @OneToMany(mappedBy = \"question\")\r\n    @JsonIgnore\r\n    List<Response> responses;\r\n\r\n    @OneToMany(mappedBy = \"question\")\r\n    @JsonIgnore\r\n    List<UserResponse> userResponses;\r\n\r\n    public Question() {\r\n    }\r\n\r\n    public Question(long id, String vertical, String question) {\r\n        this.id = id;\r\n        this.vertical = vertical;\r\n        this.question = question;\r\n    }\r\n\r\n    public long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getVertical() {\r\n        return vertical;\r\n    }\r\n\r\n    public void setVertical(String vertical) {\r\n        this.vertical = vertical;\r\n    }\r\n\r\n    public String getQuestion() {\r\n        return question;\r\n    }\r\n\r\n    public void setQuestion(String question) {\r\n        this.question = question;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Question{\" +\r\n                \"id=\" + id +\r\n                \", vertical='\" + vertical + '\\'' +\r\n                \", question='\" + question + '\\'' +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/blockchainApp/models/Question.java b/src/main/java/com/example/blockchainApp/models/Question.java
--- a/src/main/java/com/example/blockchainApp/models/Question.java	(revision 464acecd4bb69912f6229b0cb632e5bc222e035f)
+++ b/src/main/java/com/example/blockchainApp/models/Question.java	(date 1667831547372)
@@ -19,7 +19,6 @@
     private String question;
 
     @OneToMany(mappedBy = "question")
-    @JsonIgnore
     List<Response> responses;
 
     @OneToMany(mappedBy = "question")
Index: src/main/java/com/example/blockchainApp/services/UserResponseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.blockchainApp.services;\r\n\r\nimport com.example.blockchainApp.models.UserResponse;\r\nimport com.example.blockchainApp.repositories.UserResponseRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class UserResponseService {\r\n\r\n    @Autowired\r\n    private UserResponseRepository repository;\r\n\r\n    @Transactional\r\n    public List<UserResponse> getAllUserResponses() {\r\n        return repository.findAll();\r\n    }\r\n\r\n    @Transactional\r\n    public UserResponse getAllUserResponseById(Long id){\r\n        return repository.findById(id).get();\r\n    }\r\n\r\n    @Transactional\r\n    public List<UserResponse> getALlUserResponseByQuestionId(Long questionId){\r\n        return repository.findByQuestionId(questionId).iterator().next();\r\n    }\r\n\r\n    @Transactional\r\n    public List<UserResponse> getALlUserResponseByResponseId(Long responseId){\r\n        return repository.findByResponseId(responseId).iterator().next();\r\n    }\r\n\r\n    @Transactional\r\n    public List<UserResponse> getALlUserResponseByUserId(Long userId){\r\n        return repository.findByUserId(userId).iterator().next();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/blockchainApp/services/UserResponseService.java b/src/main/java/com/example/blockchainApp/services/UserResponseService.java
--- a/src/main/java/com/example/blockchainApp/services/UserResponseService.java	(revision 464acecd4bb69912f6229b0cb632e5bc222e035f)
+++ b/src/main/java/com/example/blockchainApp/services/UserResponseService.java	(date 1667831547373)
@@ -25,17 +25,17 @@
     }
 
     @Transactional
-    public List<UserResponse> getALlUserResponseByQuestionId(Long questionId){
+    public List<UserResponse> getAllUserResponseByQuestionId(Long questionId){
         return repository.findByQuestionId(questionId).iterator().next();
     }
 
     @Transactional
-    public List<UserResponse> getALlUserResponseByResponseId(Long responseId){
+    public List<UserResponse> getAllUserResponseByResponseId(Long responseId){
         return repository.findByResponseId(responseId).iterator().next();
     }
 
     @Transactional
-    public List<UserResponse> getALlUserResponseByUserId(Long userId){
+    public List<UserResponse> getAllUserResponseByUserId(Long userId){
         return repository.findByUserId(userId).iterator().next();
     }
 }
Index: src/main/java/com/example/blockchainApp/controllers/ResponseController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/blockchainApp/controllers/ResponseController.java b/src/main/java/com/example/blockchainApp/controllers/ResponseController.java
new file mode 100644
--- /dev/null	(date 1667831547370)
+++ b/src/main/java/com/example/blockchainApp/controllers/ResponseController.java	(date 1667831547370)
@@ -0,0 +1,34 @@
+package com.example.blockchainApp.controllers;
+
+import com.example.blockchainApp.models.Response;
+import com.example.blockchainApp.services.ResponseService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequestMapping(name = "/response")
+public class ResponseController {
+
+    @Autowired
+    ResponseService service;
+
+    @GetMapping("/get_all")
+    @CrossOrigin
+    public List<Response> getAllResponses() {
+        return service.getAllResponses();
+    }
+
+    @GetMapping("/{id}")
+    @CrossOrigin
+    public Response getResponsesById(@PathVariable long id) {
+        return service.getResponsesById(id);
+    }
+
+    @PostMapping("/create")
+    public Response createResponse(@RequestBody Response response) {
+        return service.createResponse(response);
+    }
+}
+
